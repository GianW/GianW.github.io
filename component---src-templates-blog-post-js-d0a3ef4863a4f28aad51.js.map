{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["bioQuery","Bio","react_default","a","createElement","gatsby_browser_entry","query","render","data","_data$site$siteMetada","site","siteMetadata","author","avatar","style","display","marginBottom","src","alt","className","href","textDecoration","color","_936587816","BlogPostTemplate","post","this","props","markdownRemark","layout","seo","title","keywords","frontmatter","tags","margin","maxWidth","padding","date","dangerouslySetInnerHTML","__html","html","bio","React","Component","pageQuery","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","menuLinks","float","to","id","type","map","menu","key","name","link","header","header_Header","_3401424843","Layout","Helmet","SEO","description","image","article","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","_ref2","_ref2$site$siteMetada","siteUrl","twitter","url","twitterUsername","react_helmet__WEBPACK_IMPORTED_MODULE_2__","content","property","length","join","_public_static_d_794042506_json__WEBPACK_IMPORTED_MODULE_0__","bool","defaultProps"],"mappings":"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","file":"component---src-templates-blog-post-js-d0a3ef4863a4f28aad51.js","sourcesContent":["import React from \"react\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction Bio() {\r\n    return (\r\n    <StaticQuery\r\n        query={bioQuery}\r\n        render={data => {\r\n            const { author, avatar } = data.site.siteMetadata\r\n            return (\r\n                <div style={{display: `flex`, marginBottom: `10px` }}>\r\n                <img src={avatar} alt=\"Gian\" className=\"authorImg\"/>\r\n                <p>Written by <strong>{author}</strong> who lives and works in Porto Alegre/BR building useful things. <br/>\r\n                <i><a href=\"https://github.com/GianW\" style={{textDecoration: `none`, color: `#b9b9b9`}}>github.com/GianW</a></i></p>\r\n            </div>\r\n            )\r\n        }}\r\n    />\r\n    )\r\n}\r\n\r\nconst bioQuery = graphql`\r\n  query BioQuery {\r\n    site {\r\n      siteMetadata {\r\n        author\r\n        avatar\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Bio","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport '../pages/main.css';\r\nimport '../pages/prism-tomorrow.css';\r\nimport Bio from \"../components/bio\"\r\n\r\n\r\nclass BlogPostTemplate extends React.Component {\r\n\r\n  render() {\r\n    const post = this.props.data.markdownRemark\r\n    // const siteTitle = this.props.data.site.siteMetadata.title\r\n    // const { previous, next } = this.props.pageContext\r\n\r\n    return (\r\n      <Layout>\r\n        <SEO\r\n          title=\"Gian Winckler page\"\r\n          keywords={post.frontmatter.tags}\r\n        />\r\n        <div style={{\r\n            margin: `0 auto`,\r\n            maxWidth: `48rem`,\r\n            padding: `1.0rem 1.0875rem`,\r\n            // color: `#b9b9b9`\r\n          }}>\r\n          <h1>{post.frontmatter.title}</h1>\r\n          <p\r\n            style={{\r\n              // ...scale(-1 / 5),\r\n              display: `block`,\r\n              // marginBottom: rhythm(1),\r\n              // marginTop: rhythm(-1),\r\n            }}\r\n          >\r\n            {post.frontmatter.date}\r\n          </p>\r\n          <hr/>\r\n          <div dangerouslySetInnerHTML={{ __html: post.html }} className=\"mainPost\" />\r\n          <hr/>\r\n          <Bio />\r\n        </div>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n      }\r\n    }\r\n    markdownRemark(\r\n      fields: { slug: { eq: $slug } }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        tags\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\r\nimport {  StaticQuery, graphql } from \"gatsby\"\r\nimport { Link } from \"gatsby\"\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n  render() {\r\n    const { data } = this.props\r\n    const menuLinks = data.site.siteMetadata.menuLinks\r\n\r\n    return (\r\n      <header>\r\n        <div\r\n          style={{\r\n            // margin: `0 auto`,\r\n            //maxWidth: 1200,\r\n            padding: `1.0rem 1.0875rem`,\r\n          }}\r\n        >\r\n          <h2 style={{ margin: 0, float: `right` }}>\r\n            <Link\r\n              to=\"/\"\r\n              style={{color: `white`, textDecoration: `none`}}\r\n            >\r\n              Gian Winckler\r\n            </Link>\r\n          </h2>\r\n          <div id=\"menuToggle\">\r\n            <input type=\"checkbox\" />\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n\r\n            <ul id=\"menu\">\r\n              {menuLinks.map(menu => {\r\n                return (<Link key={menu.name} to={menu.link}><li> {menu.name}</li></Link>)\r\n              })}\r\n\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\n// export default Header\r\n\r\n// <Link to=\"/\"><li>Home</li></Link>\r\n// <a href=\"/\"><li>About</li></a>\r\n// <a href=\"/\"><li>Info</li></a>\r\n// <a href=\"/\"><li>Contact</li></a>\r\n\r\nexport default props => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            menuLinks {\r\n              name\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => <Header data={data} {...props} />}\r\n  />\r\n)\r\n\r\n","import React from \"react\"\r\nimport Header from \"./header\"\r\nimport { Helmet } from \"react-helmet\"\r\n\r\nconst Layout = ({ children }) => (\r\n    <div>\r\n        <Helmet>\r\n            <title>Gian Winckler</title>\r\n        </Helmet>\r\n        <Header/>\r\n        <main>{children}</main>\r\n    </div>\r\n)\r\n\r\n\r\nexport default Layout","import React from \"react\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport PropTypes from \"prop-types\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ title, description, keywords, image, pathname, article }) => (\r\n  <StaticQuery\r\n    query={query}\r\n    render={({\r\n      site: {\r\n        siteMetadata: {\r\n          title,\r\n          author,\r\n          siteUrl,\r\n          twitter\r\n        }\r\n      }\r\n    }) => {\r\n\r\n      const seo = {\r\n        title: title || \"Gian Winckler\",\r\n        description: description || \"Desenvolvimento developer\",\r\n        url: `${siteUrl}${pathname || '/'}`,\r\n        twitterUsername: twitter || \"gianwinckler\"\r\n      }\r\n\r\n      return (\r\n          <Helmet>\r\n            <meta name=\"description\" content={seo.description} />\r\n            <meta name=\"image\" content={seo.image} />\r\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\r\n            {(article ? true : null) && (\r\n              <meta property=\"og:type\" content=\"article\" />\r\n            )}\r\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\r\n            {seo.description && (\r\n              <meta property=\"og:description\" content={seo.description} />\r\n            )}\r\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            {seo.twitterUsername && (\r\n              <meta name=\"twitter:creator\" content={seo.twitterUsername} />\r\n            )}\r\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\r\n            {seo.description && (\r\n              <meta name=\"twitter:description\" content={seo.description} />\r\n            )}\r\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\r\n\r\n            {keywords && keywords.length > 0 && (\r\n              <meta name=\"keywords\" content={keywords.join(`, `)}/>\r\n            )}\r\n          </Helmet>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nexport default SEO\r\n\r\nconst query = graphql`\r\n  query SEO {\r\n    site {\r\n      siteMetadata {\r\n         title,\r\n         author,\r\n         siteUrl,\r\n         social{\r\n          twitter\r\n         }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nSEO.propTypes = {\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n  image: PropTypes.string,\r\n  pathname: PropTypes.string,\r\n  article: PropTypes.bool,\r\n}\r\n\r\nSEO.defaultProps = {\r\n  title: null,\r\n  description: null,\r\n  image: null,\r\n  pathname: null,\r\n  article: false,\r\n}"],"sourceRoot":""}